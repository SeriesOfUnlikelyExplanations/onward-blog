service: onward
provider:
  name: aws
  runtime: nodejs12.x
  cfnRole: arn:aws:iam::718523126320:role/serverless
  stage: ${self:custom.stage}
  stackTags:
    serverless:servess: ${self:service}

plugins:
  - serverless-offline
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

custom:
  hostedZoneName: always-onward.com
  siteName: www.always-onward.com
  hostedZoneId: Z2FDTNDATAQYW2 # cloudfront
  DNSName: s3-website-us-east-1.amazonaws.com
  stage: ${opt:stage, 'prod'}
  s3Sync:
  - bucketName: ${self:custom.siteName}
    localDir: static
  cloudfrontInvalidate:
    distributionIdKey: CloudFrontDistributionId
    items:
      - "/*"

resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticSite"
                    },
                    "/*"
                  ]
                ]

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::Join: [
                  "", [
                    { "Ref": "StaticSite" },
                    ".s3.amazonaws.com"
                  ]
                ]
              Id:
                Ref: StaticSite
              S3OriginConfig: {}
          Enabled: 'true'
          Aliases:
            - ${self:custom.siteName}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId:
              Ref: StaticSite
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:718523126320:certificate/a9162037-75f4-4b4f-89dc-185e84007de6
            SslSupportMethod: sni-only
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #  IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
      DependsOn:
        - StaticSiteS3BucketPolicy

    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
          HostedZoneId: ${self:custom.hostedZoneId}
        HostedZoneName: ${self:custom.hostedZoneName}.
        Name: ${self:custom.siteName}.
        Type: 'A'

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: onwardUsers
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: Onward Tools
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders: [
          "COGNITO",
          "Google",
          "LoginWithAmazon"
        ]
        CallbackURLs: [
          "http://localhost:3000",
          "https://rental.always-onward.com",
          "https://www.always-onward.com"
        ]
        LogoutURLs: [
          "http://localhost:3000",
          "https://www.always-onward.com"
        ]
        AllowedOAuthFlows: [
          "implicit"
        ]
        AllowedOAuthScopes: [
          "phone",
          "openid",
          "email",
          "aws.cognito.signin.user.admin",
          "profile"
        ]
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool

  Outputs:
    StaticSiteS3BucketName:
      Value:
        Ref: StaticSite
    CloudFrontDistribution:
      Value:
        Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.stage}
    CloudFrontDistributionId:
      Description: Api Distirbution Id
      Value:
        Ref: CloudFrontDistribution
